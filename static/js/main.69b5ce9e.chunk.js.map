{"version":3,"sources":["n1-main/m1-ui/common/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/common/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/common/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/c1-SuperInputText/SuperInputText.tsx","n1-main/m1-ui/common/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/common/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/login-reducer.ts","n1-main/m2-bll/register-reducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Header","to","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","default","button_container","SuperCheckbox","onChangeChecked","children","console","log","checkbox","checkbox_block","checked","App","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","login","state","register","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69b5ce9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3fjB9\",\"errorInput\":\"SuperInputText_errorInput__19bQO\",\"error\":\"SuperInputText_error__eSWV4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__18KF3\",\"red\":\"SuperButton_red__2jjA8\",\"stripes\":\"SuperButton_stripes__1ZdBw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2muhy\",\"click-wave\":\"SuperCheckbox_click-wave__3b7TL\",\"radio\":\"SuperCheckbox_radio__o2wxc\",\"checkbox_block\":\"SuperCheckbox_checkbox_block__1fWyp\"};","import {NavLink} from \"react-router-dom\";\n\nexport const Header = () => {\n    return (\n        <div>\n            <NavLink to='/login'>login</NavLink>\n            <NavLink to='/register'>register</NavLink>\n            <NavLink to='/profile'>profile</NavLink>\n            <NavLink to='/recovery'>recovery</NavLink>\n            <NavLink to='/new'>new</NavLink>\n            <NavLink to='/input'>super input</NavLink>\n            <NavLink to='/button'>super button</NavLink>\n            <NavLink to='/checkbox'>super checkbox</NavLink>\n        </div>\n    )\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${s.errorInput} ${className}` : s.superInput; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n    return (\n        <div className={s.button_container}>\n            <button\n                className={finalClassName}\n                {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n            />\n        </div>\n\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n\n    console.log({\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    })\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        // сделайте так чтоб работал onChange и onChangeChecked\n        onChange && onChange(e);\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n         <label className={s.checkbox_block}>\n             {/*.checkbox*/}\n             <input\n                 type={\"checkbox\"}\n                 onChange={onChangeCallback}\n                 className={finalInputClassName}\n\n                 {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n             />\n             {children && <span className={s.spanClassName}>{children}</span>}\n         </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport {Header} from \"./header/Header\";\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Route path=\"/login\" render={() => \"Login\"}/>\n            <Route path=\"/register\" render={() => \"Register\"}/>\n            <Route path=\"/profile\" render={() => \"Profile\"}/>\n            <Route path=\"/recovery\" render={() => \"Password recovery\"}/>\n            <Route path=\"/new\" render={() => \"Entering a new password\"}/>\n            <Route path=\"/input\" render={() => <SuperInputText/>}/>\n            <Route path=\"/button\" render={() => <SuperButton/>}/>\n            <Route path=\"/checkbox\" render={() => <SuperCheckbox/>}/>\n            <Route path=\"/404\" render={() => \"404\"}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type ActionType = ''\n\nlet initialState = {}\n\nexport const loginReducer = (state = initialState, action: ActionType) => {\n   return  state\n}","type ActionType = ''\n\nlet initialState = {}\n\nexport let registerReducer = (state = initialState, action: ActionType) => {\n    return state\n}","import { combineReducers } from 'redux'\nimport {loginReducer} from \"./login-reducer\";\nimport { createStore } from 'redux'\nimport {registerReducer} from \"./register-reducer\";\n\nlet rootReducer = combineReducers({\n    login: loginReducer,\n    register: registerReducer\n})\n\nexport let store = createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}