{"version":3,"sources":["n1-main/m1-ui/registration/Registration.module.css","n1-main/m1-ui/login/login.module.css","n1-main/m1-ui/table/Table.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/enterNewPassword/NewPassword.module.css","n1-main/m1-ui/passwordRecovery/LostPassword.module.css","n1-main/m1-ui/common/Modal/Modal.module.css","n1-main/m1-ui/common/ButtonModal/ButtonModal.module.css","n1-main/m1-ui/packs/Packs.module.css","n1-main/m1-ui/cards/Cards.module.css","n1-main/m1-ui/packs/updatePacksModal/updatePacksModal.module.css","n1-main/m1-ui/packs/addPacksModal/addPacksModal.module.css","n1-main/m1-ui/packs/addCardsModal/addCardsModal.module.css","n1-main/m1-ui/nav/Nav.module.css","n1-main/m2-bll/registration-reducer.ts","n1-main/m2-bll/app-reducer.ts","n1-main/m3-dal/api.ts","n1-main/m2-bll/login-reducer.ts","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/login/Login.tsx","n1-main/m2-bll/packs-reducer.ts","n1-main/m1-ui/registration/Registration.tsx","n1-main/m1-ui/profile/Profile.tsx","n1-main/m2-bll/enter-new-password-reducer.ts","n1-main/m1-ui/enterNewPassword/EnterNewPassword.tsx","n1-main/m1-ui/passwordRecovery/PasswordRecovery.tsx","n1-main/m1-ui/error404/Error404.tsx","n1-main/m2-bll/cards-reducer.ts","n1-main/m1-ui/common/Modal/Modal.tsx","n1-main/m1-ui/common/ButtonModal/ButtonModal.tsx","n1-main/m1-ui/packs/updatePacksModal/updatePacksModal.tsx","n1-main/m1-ui/table/Table.tsx","n1-main/m1-ui/common/hooks/useSortableData.ts","n1-main/m1-ui/packs/addPacksModal/AddPacksModal.tsx","n1-main/m1-ui/packs/Packs.tsx","n1-main/m1-ui/packs/addCardsModal/AddCardsModal.tsx","n1-main/m1-ui/cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/nav/Nav.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/profile-reducer.ts","n1-main/m2-bll/password-recovery-reducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","initialState","isFetchingAC","isFetching","type","payload","instance","axios","create","baseURL","withCredentials","loginAPI","password","email","rememberMe","post","delete","registrationAPI","newPasswordAPI","resetPasswordToken","then","response","data","lostPasswordAPI","from","message","packsAPI","get","name","path","grade","shots","rating","deckCover","cardsPack","id","cardsCount","put","_id","updatedCardsPack","cardsAPI","successLoginAC","isAuth","errorMessage","failedLoginAC","Button","red","className","restProps","finalClassName","s","default","button_container","Input","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","input","e","currentTarget","value","key","Login","dispatch","useDispatch","useSelector","state","login","fetch","app","formik","useFormik","initialValues","onSubmit","values","res","catch","console","log","to","h1","form","handleSubmit","form_item","htmlFor","handleChange","form_item_rememberMe","button","disabled","loading","isRedirecting","isLoading","redirectAC","redirect","REDIRECT","errorAC","ERROR","loadingAC","LOADING","Registration","registration","confirmPassword","a","err","validate","errors","test","length","getFieldProps","touched","Profile","profileData","src","avatar","alt","onClick","setResponseError","responseError","changeRedirectStatus","redirectStatus","EnterNewPassword","useState","password1","setPassword1","password2","setPassword2","token","useParams","enterNewPassword","badPassword","setBadPassword","main","inputs","placeholder","PasswordRecovery","setEmail","postEmailTC","Error404","cardPacks","getPacksAC","GET_PACKS","addPackAC","pack","ADD_PACK","deletePackAC","DELETE_PACK","updatePackAC","UPDATE_PACK","Modal","visible","title","content","onClose","onKeydown","useEffect","document","addEventListener","removeEventListener","modal","modal_dialog","stopPropagation","modal_content","UpdatePacksModal","updatePackTC","button_modal","ButtonModal","Table","props","isModalUpdate","setModalUpdate","onCloseUpdate","table","table_caption","caption","table_thead","table_title_row","map","t","table_title","requestSort","charAt","toUpperCase","slice","items","k","i","f","table_item","p","table_item_button","table_button","deletePack","useSortableData","config","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","b","direction","AddPacksModal","newCardsPack","Packs","packs","onCloseAdd","setModalAdd","isModalAdd","updated","deletePackTC","button_group","getCardsAC","GET_CARDS","AddCardsModal","Cards","cards","question","answer","PATH","Routes","exact","render","Nav","style","nav","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","profile","passwordRecovery","filter","ERROR_PACK","ERROR_CARDS","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87e3599e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Registration_form__1JqTq\",\"form_item\":\"Registration_form_item__3XN0u\",\"error\":\"Registration_error__25BlV\",\"loading\":\"Registration_loading__2RcRF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"login_form__8BK8y\",\"form_item\":\"login_form_item__3Ykha\",\"button\":\"login_button__3LGme\",\"error\":\"login_error__3fqnE\",\"loading\":\"login_loading__2m_7X\",\"form_item_rememberMe\":\"login_form_item_rememberMe__1mrbN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__S9kva\",\"table_caption\":\"Table_table_caption__ouukp\",\"table_item_button\":\"Table_table_item_button__1HQfq\",\"table_button\":\"Table_table_button__1w0rW\",\"button_group\":\"Table_button_group__2ZO4v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3BL9W\",\"red\":\"Button_red__3vE5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2Oa_C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"NewPassword_main__2QV19\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"LostPassword_main__1p9VZ\",\"error\":\"LostPassword_error__1XO_D\",\"message\":\"LostPassword_message__3cQcO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2tE-q\",\"appear\":\"Modal_appear__p62wv\",\"modal_dialog\":\"Modal_modal_dialog__2kYmj\",\"animatetop\":\"Modal_animatetop__2SyTm\",\"slide-in\":\"Modal_slide-in__3ifUR\",\"modal_dialog_border\":\"Modal_modal_dialog_border__3XknN\",\"modal_header\":\"Modal_modal_header__3OvGs\",\"modal_footer\":\"Modal_modal_footer__8QXpQ\",\"modal_close\":\"Modal_modal_close__3cctW\",\"modal_content\":\"Modal_modal_content__FBYA2\",\"modal_title\":\"Modal_modal_title__oVt5U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ButtonModal_default__20ObA\",\"red\":\"ButtonModal_red__1ljdx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__1kL2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1YVNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_modal\":\"updatePacksModal_button_modal__1FUJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_modal\":\"addPacksModal_button_modal__1c0Kb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_modal\":\"addCardsModal_button_modal__1H9Db\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__1axFw\"};","import {Dispatch} from \"react\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./store\";\nimport {registrationAPI} from \"../m3-dal/api\";\n\n//variables\nexport enum ACTIONS_TYPE {\n    REDIRECT = 'Registration/REDIRECT',\n    LOADING = 'Registration/LOADING',\n    ERROR = 'Registration/ERROR',\n}\n\n//typing\ntype redirectACType = ReturnType<typeof redirectAC>\ntype errorACType = ReturnType<typeof errorAC>\nexport type loadingACType = ReturnType<typeof loadingAC>\ntype ActionType = redirectACType | errorACType | loadingACType\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n\ntype initialStateType = typeof initialState\n\n\nlet initialState = {\n    isRedirecting: false,\n    isLoading: false,\n    error: null as string | null\n}\n\nexport let registrationReducer = (state = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REDIRECT:\n            return {...state, isRedirecting: action.payload.redirect}\n\n        case ACTIONS_TYPE.ERROR:\n            return {...state, error: action.payload.error}\n\n        case ACTIONS_TYPE.LOADING:\n            return {...state, isLoading: action.payload.loading}\n        default:\n            return state\n    }\n}\n\nexport let redirectAC = (redirect: boolean) => ({\n    type: ACTIONS_TYPE.REDIRECT,\n    payload: {redirect}\n} as const)\n\nlet errorAC = (error: string | null) => ({\n    type: ACTIONS_TYPE.ERROR,\n    payload: {error}\n} as const)\n\nexport let loadingAC = (loading: boolean) => ({\n    type: ACTIONS_TYPE.LOADING,\n    payload: {loading}\n} as const)\n\n\nexport let registration = (email: string, password: string): ThunkType => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        await registrationAPI.registration(email, password)\n        dispatch(loadingAC(false))\n        dispatch(redirectAC(true))\n        dispatch(redirectAC(false))\n        dispatch(errorAC(null))\n    } catch (e) {\n        console.log(e)\n        const err = e.response\n        dispatch(errorAC(err.data.error))\n        dispatch(loadingAC(false))\n    }\n}\n\n","import {Dispatch} from \"redux\";\n\nexport type initialStateType = {\n    isFetching: boolean\n}\n\nconst initialState = {} as initialStateType\n\nexport const appReducer = (state: typeof initialState = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case 'IS-FETCHING':\n            return {\n                ...state,\n                isFetching: action.payload.isFetching\n            }\n        default:\n            return state\n    }\n}\n\n//TYPES\ntype ActionType = ReturnType<typeof isFetchingAC>;\n\n//AC\nexport const isFetchingAC = (isFetching: boolean) => ({\n    type: 'IS-FETCHING',\n    payload: {isFetching}\n} as const)\n\n//THUNK\n","import axios from \"axios\";\nimport {\n    cardsResponseType,\n    LoginResponseType,\n    LogoutResponseType,\n    PackResponseType,\n    PacksResponseType,\n    updatedCardsPackResponseType\n} from \"../m1-ui/common/types/types\";\n\nconst instance = axios.create({\n    //baseURL: 'https://neko-back.herokuapp.com/2.0',\n    baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true\n})\n\ntype ErrorType = {\n    email: string\n    error: string\n    in: string\n}\n\nexport const loginAPI = {\n    login(password: string, email: string, rememberMe: boolean) {\n        return instance.post<LoginResponseType>('auth/login', {password, email, rememberMe})\n    },\n    isAuth() {\n        return instance.post<LoginResponseType>('auth/me', {})\n    },\n    logOut() {\n        return instance.delete<LogoutResponseType>('auth/me', {})\n    }\n}\n\nexport const registrationAPI = {\n    registration(email: string, password: string) {\n        return instance.post<any | ErrorType>('/auth/register', {email, password})\n    }\n}\nexport const newPasswordAPI = {\n    postNewPassword(password: string, resetPasswordToken: string) {\n        return instance.post(`auth/set-new-password`, {password, resetPasswordToken}).then(response => response.data)\n    }\n}\nexport const lostPasswordAPI = {\n    postEmail(email: string) {\n        return instance.post(`auth/forgot`, {\n            email,\n            from: \"cards-admin <poterjannaja@bk.com>\",\n            message: `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='https://feraverto.github.io/cards/#/enter-new-password/$token$'>link</a></div>`\n            //message: `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='http://localhost:3001/cards/#/enter-new-password/$token$'>link</a></div>`\n        }).then(response => response.data)\n    }\n}\n\nexport const packsAPI = {\n    getPacks() {\n        return instance.get<PacksResponseType>(`/cards/pack`).then(response => response.data)\n    },\n\n    addPack(name?: string, path?: string,\n            grade?: number, shots?: number,\n            rating?: number, deckCover?: string, type?: string) {\n        return instance.post<PackResponseType>(`/cards/pack`, {cardsPack: {name}}).then(response => response.data)\n    },\n\n    deletePack(id: string) {\n        return instance.delete(`/cards/pack?id=${id}`)\n    },\n\n    updatePack(id: string, name?: string, cardsCount?: number) {\n        return instance.put<updatedCardsPackResponseType>(`/cards/pack`, {cardsPack:{_id: id, name: name, cardsCount: cardsCount}}).then(response => response.data.updatedCardsPack)\n    }\n}\n\nexport const cardsAPI = {\n    getCards(id: string) {\n        return instance.get<cardsResponseType>(`/cards/card&cardsPack_id=${id}`).then(response => response.data)\n    },\n\n    addCard(cardsPack_id: string,\n        question?: string,\n        answer?: string,\n        grade?: number,\n        shots?: number,\n        rating?: number,\n        answerImg?: string,\n        questionImg?: string,\n        questionVideo?: string,\n        answerVideo?: string,\n        type?: string) {\n        return instance.post(`/cards/card`, {card: cardsPack_id, question, answer})\n    },\n\n    deleteCard(id: string) {\n        return instance.delete(`/cards/card?id=${id}`)\n    },/*,\n\n    addPack(name?: string, path?: string,\n            grade?: number, shots?: number,\n            rating?: number, deckCover?: string, type?: string) {\n        return instance.post<PackResponseType>(`/cards/card`, {cardsPack: {name}}).then(response => response.data)\n    },\n\n    deletePack(id: string) {\n        return instance.delete(`/cards/pack?id=${id}`)\n    },\n\n    updatePack(id: string, name?: string, cardsCount?: number) {\n        return instance.put<updatedCardsPackResponseType>(`/cards/pack`, {cardsPack:{_id: id, name: name, cardsCount: cardsCount}}).then(response => response.data.updatedCardsPack)\n    }*/\n}\n\n","import {Dispatch} from \"redux\";\nimport { isFetchingAC } from \"./app-reducer\";\nimport {LoginResponseType} from \"../m1-ui/common/types/types\";\nimport {loginAPI} from \"../m3-dal/api\";\n\nexport type LoginStateType = {\n    isAuth: boolean\n    errorMessage: string | null\n    data: LoginResponseType\n}\n\nconst initialState = {} as LoginStateType\n\nexport const loginReducer = (state: typeof initialState = initialState, action: ActionType): LoginStateType => {\n    switch (action.type) {\n        case 'SUCCESS-LOGIN':\n            return {\n                ...state,\n                isAuth: action.payload.isAuth,\n                data: action.payload.data,\n                errorMessage: ''\n            }\n        case \"FAILED-LOGIN\":\n            return {\n                ...state,\n                isAuth: action.payload.isAuth,\n                errorMessage: action.payload.errorMessage,\n            }\n        case 'SUCCESS-LOGOUT':\n            return {\n                ...state,\n                isAuth: action.payload.isAuth,\n            }\n        default:\n            return state\n    }\n}\n\n//TYPES\ntype ActionType = ReturnType<typeof successLoginAC> | ReturnType<typeof failedLoginAC>\n    | ReturnType<typeof isFetchingAC>\n    | ReturnType<typeof successLogoutAC>\n\n//AC\nconst successLoginAC = (data: LoginResponseType, isAuth: boolean, errorMessage: string) => (\n    {\n        type: 'SUCCESS-LOGIN',\n        payload: {\n            data: {...data},\n            isAuth,\n            errorMessage\n        }\n    } as const\n)\n\nconst failedLoginAC = (errorMessage: string | null, isAuth: boolean) => (\n    {\n        type: 'FAILED-LOGIN',\n        payload: {\n            errorMessage,\n            isAuth\n        }\n    } as const\n)\n\nconst successLogoutAC = (isAuth: boolean) => (\n    {\n        type: 'SUCCESS-LOGOUT',\n        payload: {\n            isAuth\n        }\n    } as const\n)\n\n//THUNK\n\nexport const isAuthTC = () => (dispatch: Dispatch<ActionType>) => {\n    loginAPI.isAuth()\n        .then(res => {\n            dispatch(successLoginAC(res.data, true, ''))\n        })\n        .catch((e) => {\n            const error = e.response\n                ? e.response.data.error\n                : (e.message + ', more details in the console');\n            dispatch(failedLoginAC(error, false))\n        })\n}\nexport const loginTC = (password: string, email: string, rememberMe: boolean) => (dispatch: Dispatch<ActionType>) => {\n    dispatch(isFetchingAC(true))\n    loginAPI.login(password, email, rememberMe)\n        .then(res => {\n            dispatch(successLoginAC(res.data, true, ''))\n            dispatch(isFetchingAC(false))\n        })\n        .catch((e) => {\n            const error = e.response\n                ? e.response.data.error\n                : (e.message + ', more details in the console');\n            dispatch(failedLoginAC(error, false))\n            dispatch(isFetchingAC(false))\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionType>) => {\n    dispatch(isFetchingAC(true))\n    loginAPI.logOut()\n        .then(res => {\n            dispatch(successLogoutAC(false))\n            dispatch(isFetchingAC(false))\n        })\n        .catch((e) => {\n            const error = e.response\n                ? e.response.data.error\n                : (e.message + ', more details in the console');\n            dispatch(failedLoginAC(error, false))\n            dispatch(isFetchingAC(false))\n        })\n}\n\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./Button.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst Button: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n    return (\n        <div className={s.button_container}>\n            <button\n                className={finalClassName}\n                {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n            />\n        </div>\n\n    );\n}\n\nexport default Button;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./Input.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst Input: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${s.errorInput} ${className}` : s.input; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default Input;\n","import {useFormik} from \"formik\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport s from './login.module.css'\nimport {AppStateType} from \"../../m2-bll/store\";\nimport {LoginStateType, loginTC} from \"../../m2-bll/login-reducer\";\nimport Button from \"../common/Button/Button\";\nimport Input from \"../common/Input/Input\";\n\nconst Login = () => {\n\n    const dispatch = useDispatch();\n    const {\n        isAuth,\n        errorMessage\n    } = useSelector<AppStateType, LoginStateType>(state => state.login);\n    const fetch = useSelector<AppStateType, boolean>(state => state.app.isFetching);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values.password, values.email, values.rememberMe))\n        },\n    });\n\n    console.log(errorMessage)\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1 className={s.h1}>Login</h1>\n\n        <form className={s.form} onSubmit={formik.handleSubmit}>\n            <div className={s.form_item}>\n                <label htmlFor=\"email\">Email Address</label>\n                <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                />\n\n            </div>\n\n            <div className={s.form_item}>\n                <label htmlFor=\"password\">Password</label>\n                <Input type={'password'} name={'password'} id={'password'}\n                       value={formik.values.password}\n                       onChange={formik.handleChange}/>\n            </div>\n\n            <div className={`${s.form_item} ${s.form_item_rememberMe}`}>\n                <label htmlFor=\"rememberMe\">Remember me</label>\n                <input type=\"checkbox\" name=\"rememberMe\"\n                       value=\"rememberMe\" onChange={formik.handleChange}/>\n            </div>\n\n            <Button className={s.button} type=\"submit\" disabled={fetch}>Submit</Button>\n        </form>\n\n        {fetch && <div className={s.loading}>Loading...</div>}\n\n\n    </div>\n}\n\nexport default Login\n\n{/*{errorMessage  !== null && <div className={s.error}>{errorMessage}</div>}*/}\n","import {Dispatch} from \"react\";\nimport {loadingAC, loadingACType} from \"./registration-reducer\";\nimport {packsAPI} from \"../m3-dal/api\";\nimport {AppStateType} from \"./store\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {cardPacksType, cardType} from \"../m1-ui/common/types/types\";\n\nexport enum ACTIONS_TYPE {\n    GET_PACKS = 'Packs/GET_PACKS',\n    ADD_PACK = 'Packs/ADD_PACK',\n    DELETE_PACK = 'Packs/DELETE_PACK',\n    UPDATE_PACK = 'Packs/UPDATE_PACK',\n    ERROR_PACK = 'Packs/ERROR_PACK'\n}\n\ntype initialStateType = { cardPacks: cardPacksType, error: string | null }\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\ntype getPacksACType = ReturnType<typeof getPacksAC>\ntype addPackACType = ReturnType<typeof addPackAC>\ntype deletePackACType = ReturnType<typeof deletePackAC>\ntype updatePackACType = ReturnType<typeof updatePackAC>\ntype errorPackACType = ReturnType<typeof errorPackAC>\ntype ActionType =\n    getPacksACType\n    | loadingACType\n    | addPackACType\n    | deletePackACType\n    | updatePackACType\n    | errorPackACType\n\nconst initialState: initialStateType = {\n    cardPacks: [],\n    error: null\n}\n\nexport const packsReducer = (state = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ACTIONS_TYPE.GET_PACKS:\n            return {\n                ...state,\n                cardPacks: action.payload.data\n            }\n        case ACTIONS_TYPE.ADD_PACK:\n            return {\n                ...state,\n                cardPacks: [...state.cardPacks, action.payload.pack]\n            }\n        case ACTIONS_TYPE.DELETE_PACK:\n            return {\n                ...state,\n                cardPacks: state.cardPacks.filter(p => p._id !== action.payload.id)\n            }\n\n        case ACTIONS_TYPE.UPDATE_PACK:\n            return {\n                ...state,\n                cardPacks: state.cardPacks.map(p => p._id === action.payload.id ? {\n                    ...p,\n                    name: action.payload.name,\n                    cardsCount: action.payload.cardsCount\n                } : p)\n            }\n\n        case ACTIONS_TYPE.ERROR_PACK:\n            return {\n                ...state,\n                error: action.payload.error\n            }\n\n        default:\n            return state\n    }\n}\n\n//AC\nconst getPacksAC = (data: cardPacksType) => ({\n    type: ACTIONS_TYPE.GET_PACKS,\n    payload: {data}\n} as const)\n\nconst addPackAC = (pack: cardType) => ({\n    type: ACTIONS_TYPE.ADD_PACK,\n    payload: {pack}\n} as const)\n\nlet deletePackAC = (id: string) => ({\n    type: ACTIONS_TYPE.DELETE_PACK,\n    payload: {id}\n} as const)\n\nlet updatePackAC = (id: string, name: string, cardsCount: number) => ({\n    type: ACTIONS_TYPE.UPDATE_PACK,\n    payload: {id, name, cardsCount}\n} as const)\n\nlet errorPackAC = (error: null | string) => ({\n    type: ACTIONS_TYPE.ERROR_PACK,\n    payload: {error}\n} as const)\n\n//THUNK\nexport const getPacksTC = (): ThunkType => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        let data = await packsAPI.getPacks()\n        let packs = data.cardPacks\n        dispatch(getPacksAC(packs))\n        dispatch(loadingAC(false))\n    } catch (e) {\n        /*let err = e.response.data.error\n        console.log(err)\n        dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))*/\n    }\n}\n\n//THUNK\nexport const addPackTC = (name: string) => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        let data = await packsAPI.addPack(name)\n        let pack = data.newCardsPack\n        dispatch(addPackAC(pack))\n        dispatch(loadingAC(false))\n    } catch (e) {\n        /*let err = e.response.data.error\n        console.log(err)\n        dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))*/\n    }\n}\n\nexport const deletePackTC = (id: string): ThunkType => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        await packsAPI.deletePack(id)\n        dispatch(deletePackAC(id))\n        dispatch(loadingAC(false))\n    } catch (e) {\n        /*let err = e.response.data.error\n        console.log(err)\n        dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))*/\n    }\n}\n\nexport const updatePackTC = (id: string, name: string, cardsCount: number): ThunkType => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        let data = await packsAPI.updatePack(id, name, cardsCount)\n        console.log(\"packsAPI.updatePack(id, name, cardsCount)\", data)\n        dispatch(updatePackAC(data._id, data.name, data.cardsCount))\n        dispatch(loadingAC(false))\n    } catch (e) {\n        /*let err = e.response.data.error\n        console.log(err)\n        dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))*/\n    }\n}\n\n\n","import {useFormik} from \"formik\";\nimport React from \"react\";\nimport {registration} from \"../../m2-bll/registration-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../m2-bll/store\";\nimport {Redirect} from \"react-router-dom\";\nimport s from \"./Registration.module.css\"\nimport Input from \"../common/Input/Input\";\nimport Button from \"../common/Button/Button\";\n\ntype ErrorType = {\n    email?: string\n    password?: string\n}\n\nexport const Registration = () => {\n\n    const dispatch = useDispatch()\n    const error = useSelector<AppStateType, string | null>(state => state.registration.error)\n    const redirect = useSelector<AppStateType, boolean>(state => state.registration.isRedirecting)\n    const isLoading = useSelector<AppStateType, boolean>(state => state.registration.isLoading)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmPassword: ''\n        },\n\n        onSubmit: (values) => {\n            dispatch(registration(values.email, values.password))\n        },\n\n        validate: (values) => {\n            const errors: ErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length <= 7) {\n                errors.password = 'Password should be more 7 symbols';\n            }\n\n            if (values.password !== values.confirmPassword && values.confirmPassword !== \"\") {\n                errors.password = 'Passwords do not match'\n            }\n\n            return errors;\n        }\n    })\n\n    if (redirect) {\n        return <Redirect to={'login'}/>\n    }\n\n    return (\n        <div className={s.registration}>\n            <h1 className={s.h1}>Registration form</h1>\n            <form className={s.form} onSubmit={formik.handleSubmit}>\n\n                <div className={s.form_item}>\n                    <label htmlFor=\"email\">Enter your email address</label>\n\n                    <Input id='email'\n                           type=\"text\"\n                           {...formik.getFieldProps('email')}\n                    />\n                    {formik.touched.email && formik.errors.email ?\n                        <div className={s.error}>{formik.errors.email}</div> : null}\n                </div>\n\n                <div className={s.form_item}>\n                    <label htmlFor=\"email\">Enter your password</label>\n\n                    <Input id='password'\n                           type=\"password\"\n                           {...formik.getFieldProps('password')}\n                    />\n\n                    {formik.touched.password && formik.errors.password ?\n                        <div className={s.error}>{formik.errors.password}</div> : null}\n                </div>\n\n                <div className={s.form_item}>\n                    <label htmlFor=\"repeat\">Repeat password</label>\n\n                    <Input id='repeat'\n                           type=\"password\"\n                           {...formik.getFieldProps('confirmPassword')}\n                    />\n\n                    {formik.touched.confirmPassword && formik.errors.confirmPassword ?\n                        <div className={s.error}>{formik.errors.confirmPassword}</div> : null}\n                </div>\n\n                <Button className={s.button} type='submit' disabled={isLoading}>Sign up</Button>\n\n            </form>\n\n            {error && !isLoading && <div className={s.error}>{error}</div>}\n            {isLoading && <div className={s.loading}>LOADING...</div>}\n        </div>\n\n    )\n}","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../../m2-bll/store\";\nimport {logoutTC} from \"../../m2-bll/login-reducer\";\nimport {LoginResponseType} from \"../common/types/types\";\n\nconst Profile = () => {\n    const dispatch = useDispatch();\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth);\n    const fetch = useSelector<AppStateType, boolean>(state => state.app.isFetching);\n    const profileData = useSelector<AppStateType, LoginResponseType>(state => state.login.data);\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    if(!isAuth){\n        return <Redirect to={'/login'}/>\n    }\n\n    return <div>\n        Profile\n        <div>\n            <img src={profileData.avatar} alt=\"\"/>\n            <div>{profileData.name}</div>\n        </div>\n        <button onClick={logout}>logout</button>\n    </div>\n}\n\nexport default Profile\n","import {lostPasswordAPI, newPasswordAPI} from \"../m3-dal/api\";\n\n\nlet initialState = {\n    error: null,\n    redirect:false\n}\n\nexport type  initType = {\n    error: string | null,\n    redirect:boolean\n}\n\nexport const enterNewPasswordReducer = (state: initType = initialState, action: ActionType): initType => {\n    switch (action.type) {\n        case \"SET-ERROR\":\n            return {...state, error: action.responseError}\n        case \"CHANGE-REDIRECT\":\n            return {...state, redirect: action.redirectStatus}\n        default:\n            return state\n    }\n}\n\n\nexport const setResponseError = (responseError: string | null) => ({type: \"SET-ERROR\", responseError} as const)\nexport const changeRedirectStatus = (redirectStatus: boolean) => ({type: \"CHANGE-REDIRECT\", redirectStatus} as const)\n\ntype ActionType = ReturnType<typeof setResponseError> | ReturnType<typeof changeRedirectStatus>\n\n\n\nexport const postNewPasswordTC = (password:string,resetPasswordToken:string) =>\n    async (dispatch: any) => {\n        try {\n            await newPasswordAPI.postNewPassword(password,resetPasswordToken)\n            dispatch(changeRedirectStatus(true))\n        } catch (e) {\n            const error = e.response ? e.response.data.error : (e.message + \", more details in the console\");\n            dispatch(setResponseError(error))\n        }\n    }\n\nexport const postEmailTC = (email: string) =>\n    async (dispatch: any) => {\n        try {\n            await lostPasswordAPI.postEmail(email)\n            dispatch(changeRedirectStatus(true))\n        } catch (e) {\n            const error = e.response ? e.response.data.error : (e.message + \", more details in the console\");\n            dispatch(setResponseError(error))\n        }\n    }\n","import React, {ChangeEvent, useState} from \"react\"\nimport {Redirect, useParams} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppStateType} from \"../../m2-bll/store\"\nimport {postNewPasswordTC} from \"../../m2-bll/enter-new-password-reducer\"\nimport s from './NewPassword.module.css'\nimport Input from \"../common/Input/Input\";\nimport Button from \"../common/Button/Button\";\n\n\nexport const EnterNewPassword = () => {\n\n    const [password1, setPassword1] = useState(\"\")\n    const [password2, setPassword2] = useState(\"\")\n    const {token} = useParams<{ token: string }>()\n    const dispatch = useDispatch()\n    const redirect = useSelector<AppStateType, boolean>(state => state.enterNewPassword.redirect)\n    const [badPassword, setBadPassword] = useState(false)\n    const error = useSelector<AppStateType, string | null>(state => state.enterNewPassword.error)\n\n    const changePassword1 = (e: ChangeEvent<HTMLInputElement>) => {\n        setPassword1(e.currentTarget.value)\n    }\n    const changePassword2 = (e: ChangeEvent<HTMLInputElement>) => {\n        setPassword2(e.currentTarget.value)\n    }\n\n    const changePassword = () => {\n        if (password1 === password2) {\n            return dispatch(postNewPasswordTC(password2, token))\n        } else {\n            return setBadPassword(true)\n        }\n\n    }\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n\n    return <div className={s.main}>\n        <h1>Enter a new password</h1>\n        <div className={s.inputs}>\n            <Input onChange={changePassword1} type=\"password\" placeholder={\"Enter new password\"}/>\n            <Input onChange={changePassword2} type=\"password\" placeholder={\"Repeat new password\"}/>\n            {badPassword ? <div>Passwords mismatch!</div> : null}\n            {error ? <div className={s.error}>{error}</div> : null}\n        </div>\n        <Button onClick={changePassword}>Next</Button>\n    </div>\n}","import React, {ChangeEvent, useState} from \"react\";\nimport s from \"./LostPassword.module.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../m2-bll/store\";\nimport {postEmailTC, setResponseError} from \"../../m2-bll/enter-new-password-reducer\";\nimport Input from \"../common/Input/Input\";\nimport Button from \"../common/Button/Button\";\n\nexport const PasswordRecovery = () => {\n\n    const error = useSelector<AppStateType, string | null>(state => state.enterNewPassword.error)\n    const [email, setEmail] = useState(\"\")\n    const redirect = useSelector<AppStateType, boolean>(state => state.enterNewPassword.redirect)\n    const dispatch = useDispatch()\n\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n        dispatch(setResponseError(null))\n    }\n\n    const postEmail = () => {\n        return dispatch(postEmailTC(email))\n    }\n\n\n    return <div>\n        {redirect ? <h3 className={s.message}>We have sent you a message with a link to change your password to this address:{email}</h3> :\n            <div className={s.main}>\n                <h1>Enter your email or phone number</h1>\n                <h3>Please enter the email or phone number you used to login</h3>\n                <Input onChange={onInputChange} placeholder={\"Enter Email\"}/>\n                {error ? <div className={s.error}>{error}</div> : null}\n                <Button onClick={postEmail}>Next</Button>\n            </div>\n        }\n    </div>\n}","import React from \"react\";\n\nconst Error404 = () => {\n    return <div>\n        Error404\n    </div>\n}\n\nexport default Error404\n","import {Dispatch} from \"react\";\nimport {loadingAC, loadingACType} from \"./registration-reducer\";\nimport {cardsAPI} from \"../m3-dal/api\";\nimport {AppStateType} from \"./store\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {cardPacksType, cardsType, updatedCardsPackResponseType} from \"../m1-ui/common/types/types\";\n\nexport enum ACTIONS_TYPE {\n    GET_CARDS = 'Cards/GET_CARDS',\n    ADD_CARDS = 'Cards/ADD_CARDS',\n    DELETE_CARDS = 'Cards/DELETE_CARDS',\n    UPDATE_CARDS = 'Cards/UPDATE_CARDS',\n    ERROR_CARDS = 'Cards/ERROR_CARDS'\n}\n\ntype initialStateType = {}\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, any>\ntype getCardsACType = ReturnType<typeof getCardsAC>\ntype errorCardACType = ReturnType<typeof errorCardAC>\ntype ActionType =\n    getCardsACType\n    | loadingACType\n    | errorCardACType\n\nconst initialState: initialStateType = {}\n\nexport const cardsReducer = (state = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ACTIONS_TYPE.GET_CARDS:\n            return {\n                ...state,\n                cards: action.payload.data\n            }\n\n\n        case ACTIONS_TYPE.ERROR_CARDS:\n            return {\n                ...state,\n                error: action.payload.error\n            }\n\n        default:\n            return state\n    }\n}\n\n//AC\nconst getCardsAC = (data: cardsType) => ({\n    type: ACTIONS_TYPE.GET_CARDS,\n    payload: {data}\n} as const)\n\nlet errorCardAC = (error: null | string) => ({\n    type: ACTIONS_TYPE.ERROR_CARDS,\n    payload: {error}\n} as const)\n\n\n//THUNK\nexport const getCardsTC = (id: string): ThunkType => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        let data = await cardsAPI.getCards(id)\n        dispatch(getCardsAC(data.cards))\n        console.log(\"data.cards\", data.cards)\n        dispatch(loadingAC(false))\n    } catch (e) {\n        let err = e.response.data.error\n        console.log(err)\n        //dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))\n    }\n}\n\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string) => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(loadingAC(true))\n    try {\n        let data = await cardsAPI.addCard(cardsPack_id, question, answer)\n        /*dispatch(getCardsAC(data.cards))\n        console.log(\"data.cards\", data.cards)*/\n        dispatch(loadingAC(false))\n    } catch (e) {\n        let err = e.response.data.error\n        console.log(err)\n        //dispatch(errorPackAC(err))\n        dispatch(loadingAC(false))\n    }\n}\n\n\n\n","import React, {ReactElement, useEffect} from 'react'\nimport s from \"./Modal.module.css\"\n\ntype ModalType = {\n    visible: boolean,\n    title: string,\n    content: ReactElement | string,\n    onClose: () => void\n}\n\nexport const Modal: React.FC<ModalType> = ({\n                                               visible = false,\n                                               title = '',\n                                               content = '',\n                                               onClose,\n                                           }) => {\n\n    const onKeydown = ({key}: KeyboardEvent) => {\n        switch (key) {\n            case 'Escape':\n                onClose()\n                break\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('keydown', onKeydown)\n        return () => document.removeEventListener('keydown', onKeydown)\n    })\n\n    if (!visible) return null\n\n    return (\n        <div className={s.modal} onClick={onClose}>\n            <div className={s.modal_dialog} onClick={e => e.stopPropagation()}>\n                <fieldset>\n                    <legend>{title}</legend>\n                    <div className={s.modal_content}>{content}</div>\n                </fieldset>\n            </div>\n        </div>\n    )\n}\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./ButtonModal.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst Button: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n    return (\n        <div className={s.button_container}>\n            <button\n                className={finalClassName}\n                {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n            />\n        </div>\n\n    );\n}\n\nexport default Button;\n","import {useFormik} from 'formik'\nimport React from 'react'\nimport {useDispatch} from \"react-redux\";\nimport {updatePackTC} from \"../../../m2-bll/packs-reducer\";\nimport s from './updatePacksModal.module.css';\nimport ButtonModal from '../../common/ButtonModal/ButtonModal';\n\ntype UpdatePacksModal = {\n    onClose: () => void\n    name: string\n    cardsCount: number\n    id: string\n}\n\nexport const UpdatePacksModal: React.FC<UpdatePacksModal> = ({onClose, name, cardsCount, id}) => {\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            _id: id,\n            name: name,\n            cardsCount: cardsCount\n        },\n\n        onSubmit: (values) => {\n            dispatch(updatePackTC(values._id, values.name, values.cardsCount))\n            onClose()\n        }\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <input type=\"text\"\n                   placeholder=\"Enter pack's name\"\n                   {...formik.getFieldProps('name')}/>\n\n            <input type=\"number\"\n                   placeholder=\"Enter cards count\"\n                   {...formik.getFieldProps('cardsCount')}/>\n            <div className={s.button_modal}>\n                <ButtonModal type='submit'>update</ButtonModal>\n                <ButtonModal onClick={onClose}>cancel</ButtonModal>\n            </div>\n\n        </form>\n    )\n}","import React, {FC, useState} from 'react'\nimport {Modal} from \"../common/Modal/Modal\";\nimport {AddPacksModal} from \"../packs/addPacksModal/AddPacksModal\";\nimport s from \"./Table.module.css\"\nimport Button from \"../common/Button/Button\";\nimport {UpdatePacksModal} from \"../packs/updatePacksModal/updatePacksModal\";\nimport { NavLink } from 'react-router-dom';\n\n\n\ntype TableProps<X = {}> = {\n    items: any\n    deletePack: (id: string) => void\n    f: (items: any) => Array<string>\n    caption: string\n    title: string[]\n    requestSort: (key: string) => void\n}\n\n\nexport const Table: React.FC<TableProps> = (props) => {\n\n    //открыть-закрыть модальное окно для добавления колоды\n\n    const [isModalUpdate, setModalUpdate] = useState(false)\n\n\n\n    let onCloseUpdate = () => setModalUpdate(false)\n\n    let onClickDelete = (id: string) => {\n        props.deletePack(id)\n    }\n\n    return (\n        <div>\n            <table className={s.table}>\n\n                <caption className={s.table_caption}>\n                    {props.caption}\n                </caption>\n\n                <thead className={s.table_thead}>\n                <tr className={s.table_title_row}>\n                    {props.title.map(t => {\n                        return <th className={s.table_title}>\n                            <div onClick={() => props.requestSort(t)}>\n                                {t.charAt(0).toUpperCase() + t.slice(1)}\n                            </div>\n                        </th>\n                    })}\n                </tr>\n                </thead>\n\n                <tbody>\n                    {\n                        props.items.map((k: any, i: number) => {\n\n                            let values: Array<string> = props.f(k)\n\n                            return <tr key={i} className={s.table_item}>\n\n                                {\n                                    values.map((p: any) => {\n                                        return <>\n                                            <td>\n                                                {p}\n\n                                                <div className={s.table_item_button}>\n\n                                                    <Modal visible={isModalUpdate}\n                                                           title={'update pack'}\n                                                           content={<UpdatePacksModal onClose={onCloseUpdate} id={\"\"}\n                                                                                      name={\"p.name\"}\n                                                                                      cardsCount={4}/>}\n                                                           onClose={onCloseUpdate}\n                                                    />\n\n                                                </div>\n                                            </td>\n\n                                        </>\n                                    })\n                                }\n                                <div className={s.table_button}>\n                                    <Button onClick={() => onClickDelete(k._id)}>D</Button>\n                                    <Button onClick={() => setModalUpdate(true)}>U</Button>\n                                    <Button><NavLink to=\"cards\">Cards</NavLink></Button>\n                                </div>\n                            </tr>\n                        })\n                    }\n                </tbody>\n            </table>\n\n\n\n\n\n        </div>\n    )\n}","import React, {useMemo, useState} from \"react\";\n\nexport const useSortableData = (items: any, config = null) => {\n\n    //состояние объекта с ключем и направлением сортировки\n    const [sortConfig, setSortConfig] = useState<{\n        key: string\n        direction: string\n    } | null>(config);\n\n    //производит сортировку массива объектов по переданному ключу + по направлению сортировки (больше, меньше)\n    //не мутирует items\n    //результат закеширован\n    const sortedItems = useMemo(() => {\n        let sortableItems = [...items];\n        if (sortConfig !== null) {\n            sortableItems.sort((a: any, b: any) => {\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\n                }\n                return 0;\n            });\n        }\n        return sortableItems;\n    }, [items, sortConfig]);\n\n    //принимает ключ по которому производится сортировка\n    //усстанавливает значение ключа и направление сортировки в локальный стейт\n    const requestSort = (key: string) => {\n        let direction = 'ascending';\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n            direction = 'descending';\n        }\n        setSortConfig({key, direction});\n    }\n\n    //возвращает отсортированный массив\n    //функцию, которая принимает ключ\n    //и локальный стейт\n    return {items: sortedItems, requestSort, sortConfig};\n}","import {useFormik} from 'formik'\nimport React from 'react'\nimport {useDispatch} from \"react-redux\";\nimport {addPackTC} from \"../../../m2-bll/packs-reducer\";\nimport s from \"./addPacksModal.module.css\"\nimport ButtonModal from '../../common/ButtonModal/ButtonModal';\n\ntype AddPacksModal = {\n    onClose: () => void\n}\n\nexport const AddPacksModal: React.FC<AddPacksModal> = ({onClose}) => {\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            name: ''\n        },\n\n        onSubmit: (values) => {\n            dispatch(addPackTC(values.name))\n            onClose()\n        }\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <input type=\"text\"\n                   placeholder=\"Enter pack's name\"\n                   {...formik.getFieldProps('name')}/>\n            <div className={s.button_modal}>\n                <ButtonModal type='submit'>add</ButtonModal>\n                <ButtonModal onClick={onClose}>cancel</ButtonModal>\n            </div>\n\n        </form>\n    )\n}","import React, {useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppStateType} from \"../../m2-bll/store\"\nimport {useEffect} from \"react\"\nimport {deletePackTC, getPacksTC} from \"../../m2-bll/packs-reducer\"\nimport {Table} from \"../table/Table\"\nimport {cardPacksType} from \"../common/types/types\";\nimport s from \"./Packs.module.css\"\nimport {useSortableData} from \"../common/hooks/useSortableData\";\nimport {AddPacksModal} from \"./addPacksModal/AddPacksModal\";\nimport {Modal} from \"../common/Modal/Modal\";\nimport Button from \"../common/Button/Button\";\n\nexport const Packs = () => {\n\n    const error = useSelector<AppStateType, string | null>(state => state.packs.error)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getPacksTC())\n    }, [])\n\n    let deletePack = (id: string) => {\n        dispatch(deletePackTC(id))\n    }\n\n    const data = useSelector<AppStateType, cardPacksType>(state => state.packs.cardPacks)\n\n    //хук для сортировки items\n    const {items, requestSort} = useSortableData(data);\n\n    let onCloseAdd = () => setModalAdd(false)\n    const [isModalAdd, setModalAdd] = useState(false)\n\n    return (\n        <div className={s.packs}>\n            {error !== null && <div>{error}</div>}\n            <Table title={[\"name\", \"cardsCount\", \"updated\", \"actions\"]}\n                   caption={\"Packs\"}\n                   items={items}\n                   f={(items: any) => [items.name, items.cardsCount, items.updated]}\n                   deletePack={deletePack}\n                   requestSort={requestSort}\n\n            />\n            <div className={s.button_group}>\n                <Button className={s.button} onClick={() => setModalAdd(true)}>\n                    add\n                </Button>\n            </div>\n\n            <Modal visible={isModalAdd}\n                   title={'add packs'}\n                   content={<AddPacksModal onClose={onCloseAdd}/>}\n                   onClose={onCloseAdd}\n            />\n        </div>\n    )\n}\n","import {useFormik} from 'formik'\nimport React from 'react'\nimport {useDispatch} from \"react-redux\";\nimport {addPackTC} from \"../../../m2-bll/packs-reducer\";\nimport s from \"./addCardsModal.module.css\"\nimport ButtonModal from '../../common/ButtonModal/ButtonModal';\nimport {addCardTC} from \"../../../m2-bll/cards-reducer\";\n\ntype AddCardsModal = {\n    onClose: () => void\n}\n\nexport const AddCardsModal: React.FC<AddCardsModal> = ({onClose}) => {\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            name: ''\n        },\n\n        onSubmit: (values) => {\n            /*dispatch(addCardTC(values.name))*/\n            onClose()\n        }\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <input type=\"text\"\n                   placeholder=\"Enter card's name\"\n                   {...formik.getFieldProps('name')}/>\n            <div className={s.button_modal}>\n                <ButtonModal type='submit'>add</ButtonModal>\n                <ButtonModal onClick={onClose}>cancel</ButtonModal>\n            </div>\n\n        </form>\n    )\n}","import {Table} from \"../table/Table\";\nimport React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../m2-bll/store\";\nimport {cardItemType, cardPacksType, cardsType} from \"../common/types/types\";\nimport s from \"./Cards.module.css\"\nimport {useSortableData} from \"../common/hooks/useSortableData\";\nimport {getCardsTC} from \"../../m2-bll/cards-reducer\";\n/*import {AddPacksModal} from \"../packs/addPacksModal/AddPacksModal\";*/\nimport {Modal} from \"../common/Modal/Modal\";\nimport {AddPacksModal} from \"../packs/addPacksModal/AddPacksModal\";\nimport {AddCardsModal} from \"../packs/addCardsModal/AddCardsModal\";\nimport Button from \"../common/Button/Button\";\n\n\nexport const Cards = () => {\n    const dispatch = useDispatch()\n    const data = useSelector<AppStateType, cardPacksType>(state => state.packs.cardPacks)\n\n    useEffect(() => {\n        dispatch(getCardsTC(\"608057f48637cd0c64ca062e\"))\n    }, [])\n\n    let deleteCard = (id: string) => {\n        //dispatch(deleteCardTC(id))\n    }\n\n    //хук для сортировки items\n    const {items, requestSort} = useSortableData(data);\n\n    /*type XXX = {\n        question: string\n        answer: string\n        grade: string\n        updated: string\n        url: string\n    }*/\n    /*const data = [\n        {question: \" hi?\", answer: \"hi\", grade: \"12\", updated: \"11111\", url: \"2222222\"},\n        {question: \" hi?\", answer: \"hi\", grade: \"12\", updated: \"11111\", url: \"2222222\"},\n        {question: \" hi?\", answer: \"hi\", grade: \"12\", updated: \"11111\", url: \"2222222\"}\n    ]*/\n\n    let onCloseAdd = () => setModalAdd(false)\n    const [isModalAdd, setModalAdd] = useState(false)\n\n\n    return (\n        <div className={s.cards}>\n            <Table title={[\"question\", \"answer\", \"grade\", \"updated\", \"actions\"]}\n                   caption={\"Cards\"}\n                   f={(items: any) => [items.question, items.answer, items.grade, items.updated]}\n/*\n                   f={(items: any) => [items._id, items.question, items.answer, items.grade, items.updated]}\n*/\n                   items = {items}\n                   deletePack={deleteCard}\n                   requestSort={requestSort}\n\n                   /*Component={(callback: any) => <AddPacksModal onClose={callback}/>}*/\n            />\n\n            <div className={s.button_group}>\n                <Button className={s.button} onClick={() => setModalAdd(true)}>\n                    add\n                </Button>\n            </div>\n\n            <Modal visible={isModalAdd}\n                   title={'add card'}\n                /*content={props.Component(onCloseAdd)}*/\n                   content={<AddCardsModal onClose={onCloseAdd}/>}\n                   onClose={onCloseAdd}\n            />\n        </div>\n\n    )\n}\n","import React from \"react\";\nimport {Redirect, Route, Switch } from \"react-router-dom\";\nimport Login from \"../login/Login\";\nimport {Registration} from \"../registration/Registration\";\nimport Profile from \"../profile/Profile\";\nimport {EnterNewPassword} from \"../enterNewPassword/EnterNewPassword\";\nimport {PasswordRecovery} from \"../passwordRecovery/PasswordRecovery\";\nimport Error404 from \"../error404/Error404\";\nimport Table3 from \"../table/Table3\";\nimport {Packs} from \"../packs/Packs\";\nimport {Cards} from \"../cards/Cards\";\n\n\nexport const PATH = {\n    LOGIN: \"/login\",\n    REGISTRATION: \"/registration\",\n    PROFILE: \"/profile\",\n    NEW_PASS : \"/enter-new-password/:token\",\n    RESET_PASS: \"/password-recovery\",\n    TEST: \"/show-all\",\n    PACKS: \"/packs\",\n    CARDS: \"/cards\"\n}\n\nexport const Routes = () => {\n    return (\n        <div>\n            <Switch>\n\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\n                <Route path={PATH.NEW_PASS} render={() => <EnterNewPassword/>}/>\n                <Route path={PATH.RESET_PASS} render={() => <PasswordRecovery/>}/>\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\n{/*\n                <Route path={PATH.TEST} render={() => <ShowAllComponents/>}/>\n*/}\n\n                у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу\n                <Route render={() => <Error404/>}/>\n\n            </Switch>\n        </div>\n    );\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport style from'./Nav.module.css'\nimport {PATH} from \"../routes/Routes\";\n\nconst Nav = () => {\n    return <nav className={style.nav}>\n        <NavLink to={PATH.LOGIN}>Login </NavLink>\n        <NavLink to={PATH.REGISTRATION}>Registration</NavLink>\n        <NavLink to={PATH.PROFILE}>Profile</NavLink>\n        <NavLink to={PATH.RESET_PASS}>Password recovery</NavLink>\n        <NavLink to={PATH.NEW_PASS}>New password</NavLink>\n        <NavLink to={PATH.TEST}>Show all</NavLink>\n        <NavLink to={PATH.PACKS}>Packs</NavLink>\n        <NavLink to={PATH.CARDS}>Cards</NavLink>\n    </nav>\n}\n\nexport default Nav\n","import React, {useEffect} from 'react';\nimport {HashRouter} from 'react-router-dom';\nimport './App.css';\nimport {useDispatch} from \"react-redux\";\nimport {Routes} from \"./routes/Routes\";\nimport Nav from \"./nav/Nav\";\nimport {isAuthTC} from \"../m2-bll/login-reducer\";\n\n\nfunction App() {\n    useEffect(() => {\n        dispatch(isAuthTC())\n    }, [])\n\n    //const auth = useSelector<RootStateType, boolean>(state => state.login.isAuth);\n    const dispatch = useDispatch();\n\n    return (\n        <HashRouter>\n            <Nav/>\n            <Routes/>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\n\nexport type ProfileStateType = {\n}\n\nconst initialState = {} as ProfileStateType\n\nexport const profileReducer = (state: typeof initialState = initialState, action: ActionType): ProfileStateType => {\n    switch (action.type) {\n\n        default:\n            return state\n    }\n}\n\n//TYPES\ntype ActionType = any;\n\n//AC\n\n//THUNK\n\n","\nexport type PasswordRecoveryStateType = {\n}\n\nconst initialState = {} as PasswordRecoveryStateType\n\nexport const passwordRecoveryReducer = (state: typeof initialState = initialState, action: ActionType): PasswordRecoveryStateType => {\n    switch (action.type) {\n\n        default:\n            return state\n    }\n}\n\n//TYPES\ntype ActionType = any;\n\n//AC\n\n//THUNK\n","import { combineReducers, applyMiddleware } from 'redux'\nimport {loginReducer} from \"./login-reducer\";\nimport { createStore } from 'redux'\nimport {registrationReducer} from \"./registration-reducer\";\nimport thunkMiddleware from 'redux-thunk'\nimport {profileReducer} from \"./profile-reducer\";\nimport {passwordRecoveryReducer} from \"./password-recovery-reducer\";\nimport {enterNewPasswordReducer} from \"./enter-new-password-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {packsReducer} from \"./packs-reducer\";\nimport {cardsReducer} from \"./cards-reducer\";\n\nlet rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    profile: profileReducer,\n    passwordRecovery: passwordRecoveryReducer,\n    enterNewPassword: enterNewPasswordReducer,\n    app: appReducer,\n    packs: packsReducer,\n    cards: cardsReducer\n})\n\nexport type AppStateType = ReturnType<typeof rootReducer>\nexport let store = createStore(rootReducer, applyMiddleware(thunkMiddleware))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}